import pygame
import sys
import random
from pygame.locals import *
import pathfinding




pygame.init()
pygame.font.init()

score = 0
score_increment = 1

pygame.mixer.music.load('2021-08-26_-_Outlaw_Beginnings_-_www.FesliyanStudios.com.mp3')
pygame.mixer.music.play(-1)

font = pygame.font.Font(None, 36)

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

Beige = ((196, 164, 132))  # Beige color

BOARD_SIZE = 26
SQUARE_SIZE = 26
BOARD_WIDTH = BOARD_SIZE * SQUARE_SIZE
BOARD_HEIGHT = BOARD_SIZE * SQUARE_SIZE

screen = pygame.display.set_mode((BOARD_WIDTH, BOARD_HEIGHT))
pygame.display.set_caption("Dungeon Horse Breeder")

game_icon = pygame.image.load("trojan-horse.png")
pygame.display.set_icon(game_icon)

carrot_group = pygame.sprite.Group()
horse_group = pygame.sprite.Group()  # Added horse_group

farmer_image = pygame.image.load("farmer.png").convert_alpha()
FARMER_WIDTH = 30
FARMER_HEIGHT = 30
farmer_image = pygame.transform.scale(farmer_image, (FARMER_WIDTH, FARMER_HEIGHT))

carrot_image = pygame.image.load("carrot.png").convert_alpha()
CARROT_WIDTH = 20
CARROT_HEIGHT = 20
carrot_image = pygame.transform.scale(carrot_image, (CARROT_WIDTH, CARROT_HEIGHT))

# Load the mine image
mine_image = pygame.image.load("mine.png").convert_alpha()
MINE_WIDTH = 200  # Adjust the width as needed
MINE_HEIGHT = 100  # Adjust the height as needed
mine_image = pygame.transform.scale(mine_image, (MINE_WIDTH, MINE_HEIGHT))

dungeon_image = pygame.image.load("dungeon.png").convert_alpha()
DUNGEON_WIDTH = 500
DUNGEON_HEIGHT = 500
dungeon_image = pygame.transform.scale(dungeon_image, (DUNGEON_WIDTH, DUNGEON_HEIGHT))
# Load the horse pen image
horse_pen_image = pygame.image.load("horse_pen.png").convert_alpha()

# Scale the horse pen image to fit the breeding section
HORSE_PEN_WIDTH = 50  # Adjust the width as needed
HORSE_PEN_HEIGHT = 50  # Adjust the height as needed
horse_pen_image = pygame.transform.scale(horse_pen_image, (HORSE_PEN_WIDTH, HORSE_PEN_HEIGHT))

# Load the horse image
horse_image = pygame.image.load("horse.png").convert_alpha()
HORSE_WIDTH = 30
HORSE_HEIGHT = 30
horse_image = pygame.transform.scale(horse_image, (HORSE_WIDTH, HORSE_HEIGHT))

enemy_images = [
    pygame.image.load("saatan.png").convert_alpha(),
    pygame.image.load("evil.png").convert_alpha(),
    pygame.image.load("devil.png").convert_alpha(),
]
ENEMY_WIDTH = 30
ENEMY_HEIGHT = 30
for i in range(len(enemy_images)):
    enemy_images[i] = pygame.transform.scale(enemy_images[i], (ENEMY_WIDTH, ENEMY_HEIGHT))

ENEMY_SPEEDS = [1.2, 1.3, 1.5, 1.4]
ENEMY_HEALTH = [1, 1, 1, 1]

FARM_RAID_EVENT = pygame.event.custom_type()

enemy_farm_counter = 0
enemy_score = 0

total_score = 10000  # Initialize total_score variable with your desired value



clock = pygame.time.Clock()
running = True
clock.tick(60)
class Horse(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()

        self.image = horse_image
        self.rect = self.image.get_rect()
        self.rect.center = (100, 100)
        self.hunger = 0

    def update(self):
        # Implement horse behavior here
        pass


class MainCharacter(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()

        self.image = farmer_image
        self.rect = self.image.get_rect()
        self.rect.center = (100, 100)
        self.health = 100
        self.hunger = 0
        self.happiness = 100
        self.shoot_cooldown = 0
        self.carrot_counter = 0

        # Create a horse
        self.horse = Horse()

    def update(self):
        global score
        enemy_collisions = pygame.sprite.spritecollide(self, enemy_group, False)
        carrot_collisions = pygame.sprite.spritecollide(self, carrot_group, True)

        for carrot in carrot_collisions:
            self.carrot_counter += 1

        for enemy in enemy_collisions:
            score -= 1
            self.rect.x = BOARD_WIDTH - FARMER_WIDTH - 1
            self.rect.y = random.randint(0, BOARD_HEIGHT - FARMER_HEIGHT)

        # Update the horse
        self.horse.update()

    def move(self, dx, dy):
        new_x = self.rect.x + dx
        new_y = self.rect.y + dy

        if 0 <= new_x <= BOARD_WIDTH - FARMER_WIDTH:
            self.rect.x = new_x
        else:
            dx = 0

        if 0 <= new_y <= BOARD_HEIGHT - FARMER_HEIGHT:
            self.rect.y = new_y
        else:
            dy = 0

        # Update the horse position
        self.horse.rect.center = (self.rect.centerx, self.rect.centery)

        return dx, dy

    def shoot(self):
        self.shoot_cooldown -= .5
        keys = pygame.key.get_pressed()
        if keys[K_d] and self.shoot_cooldown <= 0:
            projectile = Projectile(self.rect.centerx, self.rect.centery, in_dungeon=False)
            projectile_group.add(projectile)
            self.shoot_cooldown = 5

ENEMY_DIE_EVENT = pygame.event.custom_type()

ENEMY_MOVE_OFFSCREEN_EVENT = pygame.event.custom_type()
class Enemy(pygame.sprite.Sprite):
    def __init__(self, enemy_type):
        super().__init__()

        self.image = enemy_images[enemy_type]
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(
            BOARD_WIDTH + ENEMY_WIDTH, BOARD_WIDTH + DUNGEON_WIDTH - ENEMY_WIDTH
        )
        self.rect.y = random.randint(0, BOARD_HEIGHT - ENEMY_HEIGHT)
        self.health = ENEMY_HEALTH[enemy_type]
        self.speed = ENEMY_SPEEDS[enemy_type]


    def update(self):
        self.rect.x -= self.speed

        if self.rect.left < 0:
            global enemy_score
            enemy_score += 1
            print(f"Enemy Score: {enemy_score}")
            self.rect.x = random.randint(
                BOARD_WIDTH + DUNGEON_WIDTH, BOARD_WIDTH + DUNGEON_WIDTH + ENEMY_WIDTH
            )
            self.rect.y = random.randint(0, BOARD_HEIGHT - ENEMY_HEIGHT)
    def spawn_carrot(self):
        carrot = Carrot(self.rect.x, self.rect.y, in_dungeon=False)
        carrot_group.add(carrot)

    def kill(self):
        pygame.event.post(
            pygame.event.Event(
                ENEMY_DIE_EVENT,
                x=self.rect.x,
                y=self.rect.y,
            )
        )
        super().kill()

    def update(self):
        self.rect.x -= self.speed

        if self.rect.right < -31:
            self.handle_farm_raid()

        if self.rect.right < 0:
            self.spawn_carrot()
            self.kill()


def handle_farm_raid(self):
    global total_score, farm_raids, enemy_farm_counter, enemy_score
    total_score -= 1
    farm_raids += 1
    enemy_farm_counter += 1
    enemy_score += 1
    print(f"Farm raided by: {farm_raids}")
    print(f"Enemy at farm score: {enemy_score}")


class Carrot(pygame.sprite.Sprite):
    def __init__(self, x, y, in_dungeon):
        super().__init__()

        self.image = carrot_image
        self.rect = self.image.get_rect()

        if in_dungeon:
            # Drop the carrot at the exact coordinates where the enemy died
            self.rect.topleft = (x, y)
            carrot_group.add(self)
        else:
            self.rect.topleft = (x, y)

        print(f"Carrot spawned at ({self.rect.x}, {self.rect.y})")

class Projectile(pygame.sprite.Sprite):
    def __init__(self, x, y, in_dungeon):
        super().__init__()

        self.image = pygame.Surface((5, 5))
        self.image.fill(RED)
        self.rect = self.image.get_rect()

        if in_dungeon:
            self.rect.x = x + random.randint(0, DUNGEON_WIDTH - 5)
            self.rect.y = y + random.randint(0, DUNGEON_HEIGHT - 5)
        else:
            self.rect.x = x
            self.rect.y = y

        self.speed = 5

    def update(self):
        self.rect.x += self.speed

        if self.rect.left > BOARD_WIDTH:
            self.kill()

    class Horse(pygame.sprite.Sprite):
        def __init__(self):
            super().__init__()

            self.image = horse_image
            self.rect = self.image.get_rect()
            self.rect.center = (100, 100)
            self.hunger = 0

        def update(self):

            pass


main_character = MainCharacter()

character_group = pygame.sprite.Group()
character_group.add(main_character)

enemy_group = pygame.sprite.Group()
projectile_group = pygame.sprite.Group()

breeding_section_width = 200
breeding_section_height = 100
breeding_section_color = Beige
breeding_section_rect = pygame.Rect(BOARD_WIDTH - breeding_section_width, 0, breeding_section_width,
                                  breeding_section_height)

DOOR_WIDTH = 30
DOOR_HEIGHT = BOARD_HEIGHT
door_color = Beige
door_rect = pygame.Rect(0, 0, DOOR_WIDTH, DOOR_HEIGHT)

dungeon_area_width = 300
dungeon_area_height = 300
dungeon_area_color = (128, 0, 128)
dungeon_area_rect = pygame.Rect(50, 50, dungeon_area_width, dungeon_area_height)
inside_dungeon = False
def create_random_enemies():
    for _ in range(20):
        enemy_type = random.randint(0, len(enemy_images) - 1)
        enemy = Enemy(enemy_type)
        enemy_group.add(enemy)

def dungeon_game_loop(enemy_score):
    global inside_dungeon, score

    create_random_enemies()
    while inside_dungeon:
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == ENEMY_DIE_EVENT:
                carrot = Carrot(event.x, event.y, in_dungeon=True)
                carrot_group.add(carrot)

                # Increment enemy score when a carrot spawns at (-31, BOARD_HEIGHT) in the dungeon
                if event.x < -31 and event.y == BOARD_HEIGHT:
                    enemy_score += 1
                    print(f"Enemy Score in Dungeon: {enemy_score}")

        keys = pygame.key.get_pressed()
        dx, dy = 0, 0
        if keys[K_LEFT]:
            dx = -2
        if keys[K_RIGHT]:
            dx = 2
        if keys[K_UP]:
            dy = -2
        if keys[K_DOWN]:
            dy = 2

        dx, dy = main_character.move(dx, dy)

        if door_rect.colliderect(main_character.rect):
            inside_dungeon = False
            main_character.rect.x = BOARD_WIDTH - FARMER_WIDTH - 1
            main_character.rect.y = random.randint(0, BOARD_HEIGHT - FARMER_HEIGHT)

        # Update enemy positions
        enemy_group.update()

        character_group.update()
        projectile_group.update()
        carrot_group.update()

        carrot_collisions = pygame.sprite.spritecollide(main_character, carrot_group, True)

        for carrot in carrot_collisions:
            main_character.carrot_counter += 1

        enemy_hit_dict = pygame.sprite.groupcollide(enemy_group, projectile_group, False, True)
        for enemy, projectiles in enemy_hit_dict.items():
            for projectile in projectiles:
                enemy.health -= 0.5
                if enemy.health <= 0:
                    enemy.kill()
                    score += 1

        main_character.shoot()

        screen.fill(dungeon_area_color)
        screen.blit(dungeon_image, dungeon_area_rect)
        character_group.draw(screen)
        enemy_group.draw(screen)
        projectile_group.draw(screen)
        carrot_group.draw(screen)

        score_text_dungeon = font.render(f"Score: {score}   Carrots: {main_character.carrot_counter}   Enemy Score: {enemy_score}",
                                         True, (255, 255, 255))
        screen.blit(score_text_dungeon, (10, 10))

        pygame.display.update()
        clock.tick(60)

enemy_score = 0  # Initialize enemy_score before the loop
running = True

while running:
    for event in pygame.event.get():
        if event.type == QUIT:
            running = False


    for event in pygame.event.get():
        if event.type == ENEMY_MOVE_OFFSCREEN_EVENT:
            enemy_score += 1
            print(f"Enemy Score: {enemy_score}")


    if breeding_section_rect.colliderect(main_character.rect):
        inside_dungeon = True
        main_character.rect.x = DOOR_WIDTH
        main_character.rect.y = random.randint(0, BOARD_HEIGHT - FARMER_HEIGHT)

        # Check if horse is already in the breeding section
        horse_already_present = any(isinstance(sprite, Horse) for sprite in character_group)

        if not horse_already_present:
            # Subtract 1 carrot from the counter
            if main_character.carrot_counter > 0:
                main_character.carrot_counter -= 1

                # Add a new horse to the breeding section
                horse = Horse()
                horse.rect.center = (BOARD_WIDTH - breeding_section_width // 2, breeding_section_height // 2)
                character_group.add(horse)

    keys = pygame.key.get_pressed()
    dx, dy = 0, 0
    if keys[K_LEFT]:
        dx = -2
    if keys[K_RIGHT]:
        dx = 2
    if keys[K_UP]:
        dy = -2
    if keys[K_DOWN]:
        dy = 2

    dx, dy = main_character.move(dx, dy)

    main_character.shoot()

    carrot_group.update()
    carrot_group.draw(screen)
    character_group.update()
    enemy_group.update()
    projectile_group.update()

    enemy_hit_dict = pygame.sprite.groupcollide(enemy_group, projectile_group, False, True)
    for enemy, projectiles in enemy_hit_dict.items():
        for projectile in projectiles:
            enemy.health -= 0.5
            if enemy.health <= 0:
                enemy.kill()
                score += 1

                # Check if the enemy reached -31 and handle farm raid
                if enemy.rect.right < -31:
                    enemy.handle_farm_raid()

    # Check for game over condition based on enemy's score
    if enemy_score >= 10000:
        print("You lose!")
        pygame.quit()
        sys.exit()

    screen.fill(Beige)
    pygame.draw.rect(screen, door_color, door_rect)
    pygame.draw.rect(screen, breeding_section_color, breeding_section_rect)
    character_group.draw(screen)
    enemy_group.draw(screen)
    projectile_group.draw(screen)

    # Draw the mine image in the breeding section
    mine_rect = mine_image.get_rect(center=(BOARD_WIDTH - breeding_section_width // 2, breeding_section_height // 2))
    screen.blit(mine_image, mine_rect)

    # Draw the horse pen image in the middle of the breeding section
    horse_pen_rect = horse_pen_image.get_rect(center=(BOARD_WIDTH - breeding_section_width, BOARD_HEIGHT / 2))
    screen.blit(horse_pen_image, horse_pen_rect)

    score_text_main = font.render(f"Score: {score}   Carrots: {main_character.carrot_counter}   Enemy Score: {enemy_score}",
                                  True, (255, 255, 255))
    screen.blit(score_text_main, (10, 10))

    if inside_dungeon:
        dungeon_game_loop(enemy_score)

    pygame.display.update()
    clock.tick(60)

pygame.quit()
sys.exit()

